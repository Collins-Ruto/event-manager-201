service: () -> {
    addEvent: (record {attachmentURL:text; startTime:text; title:text; date:text; description:text; price:nat64; location:text}) -> (variant {Ok:record {id:text; attachmentURL:text; startTime:text; title:text; soldAmount:nat64; date:text; description:text; seller:principal; price:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addUser: (record {name:text; email:text; address:text; phone:text}) -> (variant {Ok:record {id:text; tickets:vec text; name:text; email:text; address:text; phone:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    completePurchase: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {id:text; eventId:text; userId:text; price:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createTicket: (record {eventId:text; userId:text}) -> (variant {Ok:record {id:text; eventId:text; userName:text; userEmail:text; userId:text; userPhone:text; price:nat64; eventName:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    deleteEvent: (text) -> (variant {Ok:text; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getEvent: (text) -> (variant {Ok:record {id:text; attachmentURL:text; startTime:text; title:text; soldAmount:nat64; date:text; description:text; seller:principal; price:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getEventTickets: (text) -> (vec record {id:text; eventId:text; userName:text; userEmail:text; userId:text; userPhone:text; price:nat64; eventName:text}) query;
    getEvents: () -> (vec record {id:text; attachmentURL:text; startTime:text; title:text; soldAmount:nat64; date:text; description:text; seller:principal; price:nat64; location:text}) query;
    getSoldTickets: (text) -> (variant {Ok:vec record {id:text; eventId:text; userId:text; price:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getTickets: () -> (vec record {id:text; eventId:text; userId:text; price:nat64}) query;
    getUser: (text) -> (variant {Ok:record {id:text; tickets:vec text; name:text; email:text; address:text; phone:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getUsers: () -> (vec record {id:text; tickets:vec text; name:text; email:text; address:text; phone:text}) query;
    makePayment: (text, nat64) -> (variant {Ok:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateEvent: (record {id:text; attachmentURL:text; startTime:text; title:text; soldAmount:nat64; date:text; description:text; seller:principal; price:nat64; location:text}) -> (variant {Ok:record {id:text; attachmentURL:text; startTime:text; title:text; soldAmount:nat64; date:text; description:text; seller:principal; price:nat64; location:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateUser: (record {id:text; tickets:vec text; name:text; email:text; address:text; phone:text}) -> (variant {Ok:record {id:text; tickets:vec text; name:text; email:text; address:text; phone:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
